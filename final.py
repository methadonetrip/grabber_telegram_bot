#pip install nltk pymorphy2 pyrogram
import re
import pymysql
import json
import nltk
import pymorphy2
import asyncio
import pymysql.cursors

from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.types import ParseMode
from nltk.stem import WordNetLemmatizer
from pymorphy2 import MorphAnalyzer
from collections import Counter

from db import add_user_to_db, add_channel_to_db, add_user_status, read_status_info, \
    read_channels_info, add_keyword_to_db, read_keywords_info, add_payment_to_db, \
    read_sub_info, find_chat_id_by_payment_id
from yookassa_integration import YooKassaIntegration
from config import host, user, password, db_name, bot_token, api_id, api_hash

lemmatizer = WordNetLemmatizer()
morph = MorphAnalyzer()

api_id = api_id
api_hash = api_hash
bot_token = '6776409787:AAEOHAIOpKMdTK9dFhQVJRLB09c3lqd5-HQ'
app = Client("grabber", api_id=api_id, api_hash=api_hash)
message = Message


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@app.on_message(filters.command("start"))
async def start(client, message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö! –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ:", \
                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    chat_id = message.chat.id
    await add_user_to_db(chat_id)


#–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –°–õ–û–í
def normalize_word(word, language):
    if language == 'english':
        return lemmatizer.lemmatize(word.lower())
    elif language == 'russian':
        return morph.parse(word)[0].normal_form
    else:
        return word

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = [
    [KeyboardButton('/help')]
    [KeyboardButton('/list')],
    [KeyboardButton('/add_channel'), KeyboardButton('/add_keyword')],
    [KeyboardButton('/remove_channel'), KeyboardButton('/remove_keyword')],
    [KeyboardButton('/parse')]
    [KeyboardButton('/analyze_channel')]
]

# –ö–ù–û–ü–ö–ê HELP
@Client.on_message(filters.command("help", prefixes="/"))
async def help(client, message):
    help_text = "üåü –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º Telegram.\n\
    \n\
    –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:\n\
    \nüöÄ /start: –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\
    \nüîî /subscribe: –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\
    \nüîï /unsubscribe: –û—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\
    \n‚ûï /add_channel: –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–æ—Ç–∞.\
    \n‚ûñ /remove_channel: –£–¥–∞–ª–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\
    \nüóùÔ∏è /add_keyword: –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\
    \nüîë /remove_keyword: –£–¥–∞–ª–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\
    \nüìÉ /list_channels_keywords: –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\
    \n üìä –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats.\
    \nüîç –ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze_channel [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞].\
    \n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
    await message.reply(help_text)

# –î–û–ë–ê–í–ò–¢–¨ –ö–ê–ù–ê–õ
@app.on_message(filters.command("add_channel") & filters.private)
async def add_channel(client, message: Message):
    user_id = message.from_user.id
    await add_user_status(1, user_id)
    await message.reply("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞(–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n"\
                        "üîπ –§–æ—Ä–º–∞—Ç: @channel1;@channel2\n"\
                        "üí¨ –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π.")

# –£–ë–†–ê–¢–¨ –ö–ê–ù–ê–õ
@app.on_message(filters.command("remove_channel"))
async def remove_channel(client, message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    await add_user_status(-1, user_id)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    await message.reply("üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")

# –î–û–ë–ê–í–ò–¢–¨ KEYWORD
@app.on_message(filters.command("add_keyword"))
async def add_keyword(client, message: Message):
    user_id = message.from_user.id
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await add_user_status(2, user_id)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    await message.reply("üîç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.\n"\
                        "üåü –§–æ—Ä–º–∞—Ç: keyword1;keyword2\n"\
                        "üìå –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π.")

# –£–î–ê–õ–ò–¢–¨ KEYWORD
@app.on_message(filters.command("remove_keyword"))
async def remove_keyword(client, message: Message):
    user_id = message.from_user.id
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await add_user_status(-2, user_id)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await message.reply("Write keyword")

# –°–ü–ò–°–û–ö KEYWORDS –ò –ö–ê–ù–ê–õ–û–í
@app.on_message(filters.command("list"))
async def list_channels_keywords(client, message: Message):
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    channels_str = await read_channels_info(chat_id)
    keywords_str = await read_keywords_info(chat_id)
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–µ—Ä–µ—á–Ω–µ–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    response = (
        "üìã –í–æ—Ç –∫–∞–Ω–∞–ª—ã –∏ —Å–ª–æ–≤–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å–ª–µ–¥–∏—Ç–µ:\n\n"
        "üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
        f"{channels_str or 'None'}\n\n"  #–ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–µ–¥–µ—Ç None
        "üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n"
        f"{keywords_str or 'None'}"  
        )
    await message.reply(response, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
async def contains_keyword(text, chat_id):
    if not text:
        return False

    keywords_string = await read_keywords_info(chat_id)
    keywords = keywords_string.split(';')  # Splitting the string into individual keywords
    print(f"Keywords for chat {chat_id}: {keywords}")  # Check the fetched keywords

    normalized_text = text.lower()
    for keyword in keywords:
        pattern = r'\b' + re.escape(keyword.lower()) + r'\b'
        if re.search(pattern, normalized_text):
            print(f"Whole word '{keyword}' found in message.")  # Confirm whole word match
            return True

    return False

########################################################################################
########################################################################################
# –ü–ê–†–°–ï–†
########################################################################################
########################################################################################

async def forward_messages_from_channel_to_bot(channel_id, bot_chat_id):
    async for message in app.get_chat_history(channel_id, limit=10):
        if await contains_keyword(message.text, bot_chat_id):
            await app.forward_messages(chat_id=bot_chat_id, from_chat_id=channel_id, message_ids=[message.id])


@app.on_message(filters.command("parse"))
async def check_all_channels(client, message: Message):
    chat_id = message.chat.id
    channel_ids = await read_channels_info(chat_id)
    for channel_id in channel_ids.split(";"):
        await forward_messages_from_channel_to_bot(channel_id, chat_id)

########################################################################################
########################################################################################
# –ü–ê–†–°–ï–†
########################################################################################
########################################################################################


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "analyze_channel", –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã /analyze_channel –±–æ—Ç—É
@app.on_message(filters.command("analyze_channel"))
async def analyze_channel(client, message):
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        channel_name = message.command[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã "/analyze_channel [channel_name]"
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
        analysis = perform_channel_analysis(channel_name)  # –†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = f"–ê–Ω–∞–ª–∏–∑ –¥–ª—è {channel_name}:\n"
        for metric, value in analysis.items():
            response += f"- {metric}: {value}\n"
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(response)
    except IndexError:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞. –§–æ—Ä–º–∞—Ç: /analyze_channel [channel_name]")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
async def perform_channel_analysis(client, channel_name):
    async with client:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        messages = await client.get_chat_history(channel_name, limit=100)  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # –ß–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
        word_count = Counter()
        message_count = 0
        user_count = set()
        for message in messages:
            if message.text:
                # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                words = message.text.split()
                word_count.update(words)
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            message_count += 1
            user_count.add(message.from_user.id if message.from_user else 0)
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ 10 –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤
        most_common_words = word_count.most_common(10)
        # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        return {
            "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π": message_count,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": len(user_count),
            "–ù–∞–∏—å–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞": most_common_words
        }

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥–æ–π "add"
@app.on_message(filters.private & ~filters.command("add"))
async def handle_message(client, message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_id = message.from_user.id
    state = await read_status_info(user_id)
    print(state)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    if state == 1:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID —á–∞—Ç–∞
        channel = message.text
        chat_id = message.chat.id
        channels_atm = await read_channels_info(chat_id)
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        if channels_atm is None:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            if channel.count("@") - 1 == channel.count(";") and ("@@" or "@;" or ";;") not in channel:
                await add_channel_to_db(channel, chat_id)
                await message.reply(f"–ö–∞–Ω–∞–ª '{channel}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            else:
                await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∫–æ—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
            if channel.count("@") - 1 == channel.count(";") and ("@@" or "@;" or ";;") not in channel and channel not in channels_atm:
                channels_to_db = channels_atm + ";" + channel
                if channels_to_db[0] == ";":
                    channels_to_db = channels_to_db[1:]
                await add_channel_to_db(channels_to_db, chat_id)
                await message.reply(f"–ö–∞–Ω–∞–ª '{channel}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            else:
                await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        await add_user_status(0, user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    elif state == 2:
        keyword = message.text
        chat_id = message.chat.id
        keywords_atm = await read_keywords_info(chat_id)
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if keywords_atm is None:
            if keyword != "." and keyword[-1] != ";":
                await add_keyword_to_db(keyword, chat_id)
                await message.reply(f"–°–ª–æ–≤–æ '{keyword}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            else:
                await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        else:
            if keyword != "." and keyword[-1] != ";" and keyword not in keywords_atm:
                keywords_to_db = keywords_atm + ";" + keyword
                if keywords_to_db[0] == ";":
                    keywords_to_db = keywords_to_db[1:]
                await add_keyword_to_db(keywords_to_db, chat_id)
                await message.reply(f"–°–ª–æ–≤–æ '{keyword}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            else:
                await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        await add_user_status(0, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    elif state == -1:
        channel = message.text
        chat_id = message.chat.id
        channel_atm = await read_channels_info(chat_id)
        channel_atm = channel_atm.split(";")
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        if channel in channel_atm:
            channel_atm.remove(channel)
            channel_atm = ";".join(channel_atm)
            await add_channel_to_db(channel_atm, chat_id)
            await message.reply(f" '{channel}' —É–¥–∞–ª–µ–Ω.")
        else:
            await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        await add_user_status(0, user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    elif state == -2:
        keyword = message.text
        chat_id = message.chat.id
        keywords_atm = await read_keywords_info(chat_id)
        keywords_atm = keywords_atm.split(";")
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if keyword in keywords_atm:
            keywords_atm.remove(keyword)
            keywords_atm = ";".join(keywords_atm)
            await add_keyword_to_db(keywords_atm, chat_id)
            await message.reply(f" '{keyword}' —É–¥–∞–ª–µ–Ω.")
        else:
            await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        await add_user_status(0, user_id)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app.run()
